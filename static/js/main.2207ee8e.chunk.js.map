{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["GoogleSpreadSheetDemo","useState","data","setData","setup","rings","quadrants","dataUrl","useEffect","cacheKey","scheduleInvalidate","timeToLive","radarCache","setTimeout","console","log","localStorage","removeItem","cachedData","getItem","JSON","parse","Tabletop","key","callback","setItem","stringify","simpleSheet","getDataFromCache","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"+QAqFeA,MA1Ef,WAGI,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAQ,CACVC,MAAO,CAAC,OAAQ,SAAU,QAC1BC,UAAW,CAAC,aAAc,eAAgB,UAC1CJ,KAAMA,EACNK,QAXwB,4FAoE5B,OApDAC,qBAAU,YAEmB,SAACC,GAEtB,IAAMC,EAAqB,SAACC,GAExB,IAAMC,EAAaC,YAAW,WAC1BC,QAAQC,IAAI,4BAA8BH,GAC1CI,aAAaC,WAAW,cAAgBb,EAAMG,WAClC,IAAbI,GACHG,QAAQC,IAAI,oBAAsBH,IAyBhCM,EAAaF,aAAaG,QAAQ,cAAgBf,EAAMG,SAC1DW,GAEAJ,QAAQC,IAAI,aACZZ,EAAQiB,KAAKC,MAAMH,IAGnBR,EA5DE,KAkCFY,OAAc,CACVC,IAAKd,EACLe,SAAU,SAACtB,GAGPC,EAAQD,GAGRc,aAAaS,QAAQ,cAAgBrB,EAAMG,QAASa,KAAKM,UAAUxB,IAGnEQ,EA7CN,KAgDEiB,aAAa,IAkBzBC,CAAiBxB,EAAMG,WAExB,CAACH,EAAMG,QApEI,KAuEV,yBAAKsB,UAAU,OACX,kBAAC,IAAUzB,KCnER0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.2207ee8e.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport * as Tabletop from \"tabletop\";\nimport React from \"react\";\nimport Radar from \"react-tech-radar\";\n\n//Data fetched from tabletop is cached for this number of seconds.\nconst CACHE_TTL = 10;\n\nconst GOOGLE_SPREADSHEET_LINK = \"https://docs.google.com/spreadsheets/d/1k5wTMuNmEIK9lovMaCKMYmjC74ydn0dy-6SyWQnei48/edit\";\n\nfunction GoogleSpreadSheetDemo() {\n\n    //state variable data\n    const [data, setData] = useState([]);\n\n    const setup = {\n        rings: ['core', 'assess', 'hold'],\n        quadrants: ['components', 'integrations', 'clouds'],\n        data: data,\n        dataUrl: GOOGLE_SPREADSHEET_LINK\n    };\n\n    //effect is used to fetch data\n    //when component is mounted.\n    useEffect(() => {\n\n        const getDataFromCache = (cacheKey) => {\n\n            const scheduleInvalidate = (timeToLive) => {\n\n                const radarCache = setTimeout(() => {\n                    console.log(\"Radar cache invalidated: \" + radarCache);\n                    localStorage.removeItem(\"RADAR_DATA_\" + setup.dataUrl);\n                }, timeToLive * 1000);\n                console.log(\"Radar cache set: \" + radarCache);\n            };\n\n            //fetch data from google spreadsheets via tabletop\n            //and store it in state\n            const getFromTableTop = () => {\n                Tabletop.init({\n                    key: cacheKey,\n                    callback: (data) => {\n\n                        //update state\n                        setData(data);\n\n                        //update cache\n                        localStorage.setItem(\"RADAR_DATA_\" + setup.dataUrl, JSON.stringify(data));\n\n                        //clean cache when expired\n                        scheduleInvalidate(CACHE_TTL);\n\n                    },\n                    simpleSheet: true\n                });\n            };\n\n            //get from cache or fetch from spreadsheet\n            const cachedData = localStorage.getItem(\"RADAR_DATA_\" + setup.dataUrl);\n            if (cachedData) {\n\n                console.log(\"Cache hit\");\n                setData(JSON.parse(cachedData));\n\n                //clean cache when expired\n                scheduleInvalidate(CACHE_TTL);\n            } else {\n                getFromTableTop();\n            }\n        };\n\n        getDataFromCache(setup.dataUrl);\n\n    }, [setup.dataUrl, CACHE_TTL]);\n\n    return (\n        <div className=\"App\">\n            <Radar {...setup} />\n        </div>\n    );\n\n}\n\nexport default GoogleSpreadSheetDemo;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}